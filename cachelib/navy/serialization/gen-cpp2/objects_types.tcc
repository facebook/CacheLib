/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "/h/bsberg/CacheLib2/cachelib/navy/serialization/gen-cpp2/objects_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::IndexEntry> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::IndexBucket> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::Region> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::RegionData> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::AccessStats> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::AccessTracker> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::BlockCacheConfig> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::BigHashPersistentData> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::facebook::cachelib::navy::serialization::BloomFilterPersistentData> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void IndexEntry::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_key:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->key, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_value:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->value, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<IndexEntry>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_key;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_value;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t IndexEntry::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IndexEntry");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->key);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IndexEntry::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IndexEntry");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->key);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IndexEntry::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("IndexEntry");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void IndexEntry::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t IndexEntry::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t IndexEntry::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IndexEntry::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void IndexEntry::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t IndexEntry::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t IndexEntry::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t IndexEntry::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void IndexBucket::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_bucketId:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->bucketId, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_entries:
  {
    _readState.beforeSubobject(iprot);
    
    this->entries = ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>>::read(*iprot, this->entries);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<IndexBucket>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_bucketId;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_entries;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t IndexBucket::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IndexBucket");
  xfer += prot_->serializedFieldSize("bucketId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->bucketId);
  xfer += prot_->serializedFieldSize("entries", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>>::serializedSize<false>(*prot_, this->entries);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IndexBucket::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IndexBucket");
  xfer += prot_->serializedFieldSize("bucketId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->bucketId);
  xfer += prot_->serializedFieldSize("entries", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>>::serializedSize<false>(*prot_, this->entries);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IndexBucket::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("IndexBucket");
  xfer += prot_->writeFieldBegin("bucketId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->bucketId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("entries", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>>::write(*prot_, this->entries);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void IndexBucket::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t IndexBucket::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t IndexBucket::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IndexBucket::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void IndexBucket::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t IndexBucket::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t IndexBucket::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t IndexBucket::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void Region::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_regionId:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->regionId, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_lastEntryEndOffset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->lastEntryEndOffset, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_classId:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->classId, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_numItems:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->numItems, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_pinned:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->pinned, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Region>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_regionId;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_lastEntryEndOffset;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_classId;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_numItems;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_pinned;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Region::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Region");
  xfer += prot_->serializedFieldSize("regionId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->regionId);
  xfer += prot_->serializedFieldSize("lastEntryEndOffset", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->lastEntryEndOffset);
  xfer += prot_->serializedFieldSize("classId", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->classId);
  xfer += prot_->serializedFieldSize("numItems", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->numItems);
  xfer += prot_->serializedFieldSize("pinned", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->pinned);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Region::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Region");
  xfer += prot_->serializedFieldSize("regionId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->regionId);
  xfer += prot_->serializedFieldSize("lastEntryEndOffset", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->lastEntryEndOffset);
  xfer += prot_->serializedFieldSize("classId", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->classId);
  xfer += prot_->serializedFieldSize("numItems", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->numItems);
  xfer += prot_->serializedFieldSize("pinned", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->pinned);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Region::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Region");
  xfer += prot_->writeFieldBegin("regionId", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->regionId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lastEntryEndOffset", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->lastEntryEndOffset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("classId", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->classId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("numItems", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->numItems);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("pinned", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->pinned);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Region::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Region::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Region::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Region::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Region::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Region::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Region::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Region::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void RegionData::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_regions:
  {
    _readState.beforeSubobject(iprot);
    
    this->regions = ::std::vector< ::facebook::cachelib::navy::serialization::Region>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::Region>>::read(*iprot, this->regions);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_regionSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->regionSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<RegionData>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_regions;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_regionSize;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t RegionData::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RegionData");
  xfer += prot_->serializedFieldSize("regions", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::Region>>::serializedSize<false>(*prot_, this->regions);
  xfer += prot_->serializedFieldSize("regionSize", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->regionSize);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RegionData::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RegionData");
  xfer += prot_->serializedFieldSize("regions", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::Region>>::serializedSize<false>(*prot_, this->regions);
  xfer += prot_->serializedFieldSize("regionSize", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->regionSize);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RegionData::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RegionData");
  xfer += prot_->writeFieldBegin("regions", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::facebook::cachelib::navy::serialization::Region>>::write(*prot_, this->regions);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("regionSize", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->regionSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void RegionData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RegionData::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RegionData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RegionData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RegionData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RegionData::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RegionData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RegionData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void AccessStats::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_totalHits:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->totalHits, _readState);
    this->__isset.totalHits = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_currHits:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->currHits, _readState);
    this->__isset.currHits = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_numReinsertions:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->numReinsertions, _readState);
    this->__isset.numReinsertions = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<AccessStats>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_totalHits;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_currHits;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_numReinsertions;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AccessStats::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AccessStats");
  xfer += prot_->serializedFieldSize("totalHits", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->totalHits);
  xfer += prot_->serializedFieldSize("currHits", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->currHits);
  xfer += prot_->serializedFieldSize("numReinsertions", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->numReinsertions);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AccessStats::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AccessStats");
  xfer += prot_->serializedFieldSize("totalHits", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->totalHits);
  xfer += prot_->serializedFieldSize("currHits", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->currHits);
  xfer += prot_->serializedFieldSize("numReinsertions", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->numReinsertions);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AccessStats::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AccessStats");
  xfer += prot_->writeFieldBegin("totalHits", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->totalHits);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("currHits", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->currHits);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("numReinsertions", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->numReinsertions);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void AccessStats::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AccessStats::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AccessStats::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AccessStats::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void AccessStats::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AccessStats::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AccessStats::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AccessStats::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void AccessTracker::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_data:
  {
    _readState.beforeSubobject(iprot);
    
    this->data = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>::read(*iprot, this->data);
    this->__isset.data = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<AccessTracker>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_data;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AccessTracker::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AccessTracker");
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>::serializedSize<false>(*prot_, this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AccessTracker::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AccessTracker");
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>::serializedSize<false>(*prot_, this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AccessTracker::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AccessTracker");
  xfer += prot_->writeFieldBegin("data", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>::write(*prot_, this->data);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void AccessTracker::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t AccessTracker::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t AccessTracker::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t AccessTracker::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void AccessTracker::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t AccessTracker::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t AccessTracker::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t AccessTracker::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void BlockCacheConfig::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_version:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->version, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_cacheBaseOffset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->cacheBaseOffset, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_cacheSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->cacheSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_blockSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->blockSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sizeClasses:
  {
    _readState.beforeSubobject(iprot);
    
    this->sizeClasses = ::std::set<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int32_t>>::read(*iprot, this->sizeClasses);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_checksum:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->checksum, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_sizeDist:
  {
    _readState.beforeSubobject(iprot);
    
    this->sizeDist = ::std::map<int64_t, int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::read(*iprot, this->sizeDist);
    this->__isset.sizeDist = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_holeCount:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->holeCount, _readState);
    this->__isset.holeCount = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_holeSizeTotal:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->holeSizeTotal, _readState);
    this->__isset.holeSizeTotal = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_reinsertionPolicyEnabled:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->reinsertionPolicyEnabled, _readState);
    this->__isset.reinsertionPolicyEnabled = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<BlockCacheConfig>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_version;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_cacheBaseOffset;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_cacheSize;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_blockSize;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sizeClasses;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_checksum;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_sizeDist;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_holeCount;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_holeSizeTotal;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_reinsertionPolicyEnabled;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t BlockCacheConfig::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BlockCacheConfig");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->version);
  xfer += prot_->serializedFieldSize("cacheBaseOffset", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheBaseOffset);
  xfer += prot_->serializedFieldSize("cacheSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheSize);
  xfer += prot_->serializedFieldSize("blockSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->blockSize);
  xfer += prot_->serializedFieldSize("sizeClasses", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int32_t>>::serializedSize<false>(*prot_, this->sizeClasses);
  xfer += prot_->serializedFieldSize("checksum", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->checksum);
  xfer += prot_->serializedFieldSize("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->sizeDist);
  xfer += prot_->serializedFieldSize("holeCount", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->holeCount);
  xfer += prot_->serializedFieldSize("holeSizeTotal", apache::thrift::protocol::T_I64, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->holeSizeTotal);
  xfer += prot_->serializedFieldSize("reinsertionPolicyEnabled", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->reinsertionPolicyEnabled);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BlockCacheConfig::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BlockCacheConfig");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->version);
  xfer += prot_->serializedFieldSize("cacheBaseOffset", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheBaseOffset);
  xfer += prot_->serializedFieldSize("cacheSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheSize);
  xfer += prot_->serializedFieldSize("blockSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->blockSize);
  xfer += prot_->serializedFieldSize("sizeClasses", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int32_t>>::serializedSize<false>(*prot_, this->sizeClasses);
  xfer += prot_->serializedFieldSize("checksum", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->checksum);
  xfer += prot_->serializedFieldSize("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->sizeDist);
  xfer += prot_->serializedFieldSize("holeCount", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->holeCount);
  xfer += prot_->serializedFieldSize("holeSizeTotal", apache::thrift::protocol::T_I64, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->holeSizeTotal);
  xfer += prot_->serializedFieldSize("reinsertionPolicyEnabled", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->reinsertionPolicyEnabled);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BlockCacheConfig::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BlockCacheConfig");
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("cacheBaseOffset", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->cacheBaseOffset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("cacheSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->cacheSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("blockSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->blockSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sizeClasses", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int32_t>>::write(*prot_, this->sizeClasses);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("checksum", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->checksum);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::write(*prot_, this->sizeDist);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("holeCount", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->holeCount);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("holeSizeTotal", apache::thrift::protocol::T_I64, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->holeSizeTotal);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("reinsertionPolicyEnabled", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->writeBool(this->reinsertionPolicyEnabled);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void BlockCacheConfig::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BlockCacheConfig::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BlockCacheConfig::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BlockCacheConfig::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void BlockCacheConfig::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BlockCacheConfig::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BlockCacheConfig::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BlockCacheConfig::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void BigHashPersistentData::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_version:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->version, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_generationTime:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->generationTime, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_itemCount:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->itemCount, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_bucketSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->bucketSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_cacheBaseOffset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->cacheBaseOffset, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_numBuckets:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->numBuckets, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_sizeDist:
  {
    _readState.beforeSubobject(iprot);
    
    this->sizeDist = ::std::map<int64_t, int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::read(*iprot, this->sizeDist);
    this->__isset.sizeDist = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<BigHashPersistentData>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_version;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_generationTime;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_itemCount;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_bucketSize;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_cacheBaseOffset;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_numBuckets;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_sizeDist;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t BigHashPersistentData::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BigHashPersistentData");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->version);
  xfer += prot_->serializedFieldSize("generationTime", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->generationTime);
  xfer += prot_->serializedFieldSize("itemCount", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->itemCount);
  xfer += prot_->serializedFieldSize("bucketSize", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->bucketSize);
  xfer += prot_->serializedFieldSize("cacheBaseOffset", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheBaseOffset);
  xfer += prot_->serializedFieldSize("numBuckets", apache::thrift::protocol::T_I64, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->numBuckets);
  xfer += prot_->serializedFieldSize("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->sizeDist);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BigHashPersistentData::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BigHashPersistentData");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->version);
  xfer += prot_->serializedFieldSize("generationTime", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->generationTime);
  xfer += prot_->serializedFieldSize("itemCount", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->itemCount);
  xfer += prot_->serializedFieldSize("bucketSize", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->bucketSize);
  xfer += prot_->serializedFieldSize("cacheBaseOffset", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->cacheBaseOffset);
  xfer += prot_->serializedFieldSize("numBuckets", apache::thrift::protocol::T_I64, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->numBuckets);
  xfer += prot_->serializedFieldSize("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->sizeDist);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BigHashPersistentData::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BigHashPersistentData");
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("generationTime", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->generationTime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("itemCount", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->itemCount);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("bucketSize", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->bucketSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("cacheBaseOffset", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->cacheBaseOffset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("numBuckets", apache::thrift::protocol::T_I64, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->numBuckets);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sizeDist", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int64_t>>::write(*prot_, this->sizeDist);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void BigHashPersistentData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BigHashPersistentData::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BigHashPersistentData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BigHashPersistentData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void BigHashPersistentData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BigHashPersistentData::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BigHashPersistentData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BigHashPersistentData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {

template <class Protocol_>
void BloomFilterPersistentData::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_numFilters:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->numFilters, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_hashTableBitSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->hashTableBitSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_filterByteSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->filterByteSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fragmentSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->fragmentSize, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_seeds:
  {
    _readState.beforeSubobject(iprot);
    
    this->seeds = ::std::vector<int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::read(*iprot, this->seeds);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<BloomFilterPersistentData>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_numFilters;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_hashTableBitSize;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_filterByteSize;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_fragmentSize;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_seeds;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t BloomFilterPersistentData::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BloomFilterPersistentData");
  xfer += prot_->serializedFieldSize("numFilters", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->numFilters);
  xfer += prot_->serializedFieldSize("hashTableBitSize", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->hashTableBitSize);
  xfer += prot_->serializedFieldSize("filterByteSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->filterByteSize);
  xfer += prot_->serializedFieldSize("fragmentSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->fragmentSize);
  xfer += prot_->serializedFieldSize("seeds", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::serializedSize<false>(*prot_, this->seeds);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BloomFilterPersistentData::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BloomFilterPersistentData");
  xfer += prot_->serializedFieldSize("numFilters", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->numFilters);
  xfer += prot_->serializedFieldSize("hashTableBitSize", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->hashTableBitSize);
  xfer += prot_->serializedFieldSize("filterByteSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->filterByteSize);
  xfer += prot_->serializedFieldSize("fragmentSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->fragmentSize);
  xfer += prot_->serializedFieldSize("seeds", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::serializedSize<false>(*prot_, this->seeds);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BloomFilterPersistentData::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BloomFilterPersistentData");
  xfer += prot_->writeFieldBegin("numFilters", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->numFilters);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("hashTableBitSize", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->hashTableBitSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("filterByteSize", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->filterByteSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fragmentSize", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->fragmentSize);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("seeds", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::write(*prot_, this->seeds);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void BloomFilterPersistentData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BloomFilterPersistentData::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BloomFilterPersistentData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BloomFilterPersistentData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void BloomFilterPersistentData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BloomFilterPersistentData::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BloomFilterPersistentData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BloomFilterPersistentData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // facebook::cachelib::navy::serialization
