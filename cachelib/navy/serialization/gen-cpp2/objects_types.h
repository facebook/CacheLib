/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct key;
struct value;
struct bucketId;
struct entries;
struct regionId;
struct lastEntryEndOffset;
struct classId;
struct numItems;
struct pinned;
struct regions;
struct regionSize;
struct totalHits;
struct currHits;
struct numReinsertions;
struct data;
struct version;
struct cacheBaseOffset;
struct cacheSize;
struct blockSize;
struct sizeClasses;
struct checksum;
struct sizeDist;
struct holeCount;
struct holeSizeTotal;
struct reinsertionPolicyEnabled;
struct version;
struct generationTime;
struct itemCount;
struct bucketSize;
struct cacheBaseOffset;
struct numBuckets;
struct sizeDist;
struct numFilters;
struct hashTableBitSize;
struct filterByteSize;
struct fragmentSize;
struct seeds;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bucketId
#define APACHE_THRIFT_ACCESSOR_bucketId
APACHE_THRIFT_DEFINE_ACCESSOR(bucketId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_entries
#define APACHE_THRIFT_ACCESSOR_entries
APACHE_THRIFT_DEFINE_ACCESSOR(entries);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regionId
#define APACHE_THRIFT_ACCESSOR_regionId
APACHE_THRIFT_DEFINE_ACCESSOR(regionId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lastEntryEndOffset
#define APACHE_THRIFT_ACCESSOR_lastEntryEndOffset
APACHE_THRIFT_DEFINE_ACCESSOR(lastEntryEndOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_classId
#define APACHE_THRIFT_ACCESSOR_classId
APACHE_THRIFT_DEFINE_ACCESSOR(classId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numItems
#define APACHE_THRIFT_ACCESSOR_numItems
APACHE_THRIFT_DEFINE_ACCESSOR(numItems);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pinned
#define APACHE_THRIFT_ACCESSOR_pinned
APACHE_THRIFT_DEFINE_ACCESSOR(pinned);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regions
#define APACHE_THRIFT_ACCESSOR_regions
APACHE_THRIFT_DEFINE_ACCESSOR(regions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regionSize
#define APACHE_THRIFT_ACCESSOR_regionSize
APACHE_THRIFT_DEFINE_ACCESSOR(regionSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_totalHits
#define APACHE_THRIFT_ACCESSOR_totalHits
APACHE_THRIFT_DEFINE_ACCESSOR(totalHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currHits
#define APACHE_THRIFT_ACCESSOR_currHits
APACHE_THRIFT_DEFINE_ACCESSOR(currHits);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numReinsertions
#define APACHE_THRIFT_ACCESSOR_numReinsertions
APACHE_THRIFT_DEFINE_ACCESSOR(numReinsertions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheBaseOffset
#define APACHE_THRIFT_ACCESSOR_cacheBaseOffset
APACHE_THRIFT_DEFINE_ACCESSOR(cacheBaseOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheSize
#define APACHE_THRIFT_ACCESSOR_cacheSize
APACHE_THRIFT_DEFINE_ACCESSOR(cacheSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blockSize
#define APACHE_THRIFT_ACCESSOR_blockSize
APACHE_THRIFT_DEFINE_ACCESSOR(blockSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sizeClasses
#define APACHE_THRIFT_ACCESSOR_sizeClasses
APACHE_THRIFT_DEFINE_ACCESSOR(sizeClasses);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_checksum
#define APACHE_THRIFT_ACCESSOR_checksum
APACHE_THRIFT_DEFINE_ACCESSOR(checksum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sizeDist
#define APACHE_THRIFT_ACCESSOR_sizeDist
APACHE_THRIFT_DEFINE_ACCESSOR(sizeDist);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_holeCount
#define APACHE_THRIFT_ACCESSOR_holeCount
APACHE_THRIFT_DEFINE_ACCESSOR(holeCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_holeSizeTotal
#define APACHE_THRIFT_ACCESSOR_holeSizeTotal
APACHE_THRIFT_DEFINE_ACCESSOR(holeSizeTotal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reinsertionPolicyEnabled
#define APACHE_THRIFT_ACCESSOR_reinsertionPolicyEnabled
APACHE_THRIFT_DEFINE_ACCESSOR(reinsertionPolicyEnabled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_version
#define APACHE_THRIFT_ACCESSOR_version
APACHE_THRIFT_DEFINE_ACCESSOR(version);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_generationTime
#define APACHE_THRIFT_ACCESSOR_generationTime
APACHE_THRIFT_DEFINE_ACCESSOR(generationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_itemCount
#define APACHE_THRIFT_ACCESSOR_itemCount
APACHE_THRIFT_DEFINE_ACCESSOR(itemCount);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bucketSize
#define APACHE_THRIFT_ACCESSOR_bucketSize
APACHE_THRIFT_DEFINE_ACCESSOR(bucketSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheBaseOffset
#define APACHE_THRIFT_ACCESSOR_cacheBaseOffset
APACHE_THRIFT_DEFINE_ACCESSOR(cacheBaseOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numBuckets
#define APACHE_THRIFT_ACCESSOR_numBuckets
APACHE_THRIFT_DEFINE_ACCESSOR(numBuckets);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sizeDist
#define APACHE_THRIFT_ACCESSOR_sizeDist
APACHE_THRIFT_DEFINE_ACCESSOR(sizeDist);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numFilters
#define APACHE_THRIFT_ACCESSOR_numFilters
APACHE_THRIFT_DEFINE_ACCESSOR(numFilters);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hashTableBitSize
#define APACHE_THRIFT_ACCESSOR_hashTableBitSize
APACHE_THRIFT_DEFINE_ACCESSOR(hashTableBitSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_filterByteSize
#define APACHE_THRIFT_ACCESSOR_filterByteSize
APACHE_THRIFT_DEFINE_ACCESSOR(filterByteSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fragmentSize
#define APACHE_THRIFT_ACCESSOR_fragmentSize
APACHE_THRIFT_DEFINE_ACCESSOR(fragmentSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_seeds
#define APACHE_THRIFT_ACCESSOR_seeds
APACHE_THRIFT_DEFINE_ACCESSOR(seeds);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class IndexEntry;
class IndexBucket;
class Region;
class RegionData;
class AccessStats;
class AccessTracker;
class BlockCacheConfig;
class BigHashPersistentData;
class BloomFilterPersistentData;
}}}} // facebook::cachelib::navy::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class IndexEntry final : private apache::thrift::detail::st::ComparisonOperators<IndexEntry> {
 public:

  IndexEntry() :
      key(0),
      value(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexEntry(apache::thrift::FragileConstructor, int32_t key__arg, int32_t value__arg);

  IndexEntry(IndexEntry&&) = default;

  IndexEntry(const IndexEntry&) = default;

  IndexEntry& operator=(IndexEntry&&) = default;

  IndexEntry& operator=(const IndexEntry&) = default;
  void __clear();
 public:
  int32_t key;
 public:
  int32_t value;

 public:
  bool operator==(const IndexEntry& rhs) const;
  bool operator<(const IndexEntry& rhs) const;

  int32_t get_key() const {
    return key;
  }

  int32_t& set_key(int32_t key_) {
    key = key_;
    return key;
  }

  int32_t get_value() const {
    return value;
  }

  int32_t& set_value(int32_t value_) {
    value = value_;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< IndexEntry >;
};

void swap(IndexEntry& a, IndexEntry& b);

template <class Protocol_>
uint32_t IndexEntry::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class IndexBucket final : private apache::thrift::detail::st::ComparisonOperators<IndexBucket> {
 public:

  IndexBucket() :
      bucketId(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexBucket(apache::thrift::FragileConstructor, int32_t bucketId__arg, ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry> entries__arg);

  IndexBucket(IndexBucket&&) = default;

  IndexBucket(const IndexBucket&) = default;

  IndexBucket& operator=(IndexBucket&&) = default;

  IndexBucket& operator=(const IndexBucket&) = default;
  void __clear();
 public:
  int32_t bucketId;
 public:
  ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry> entries;

 public:
  bool operator==(const IndexBucket& rhs) const;
  bool operator<(const IndexBucket& rhs) const;

  int32_t get_bucketId() const {
    return bucketId;
  }

  int32_t& set_bucketId(int32_t bucketId_) {
    bucketId = bucketId_;
    return bucketId;
  }
  const ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>& get_entries() const&;
  ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry> get_entries() &&;

  template <typename T_IndexBucket_entries_struct_setter = ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>>
  ::std::vector< ::facebook::cachelib::navy::serialization::IndexEntry>& set_entries(T_IndexBucket_entries_struct_setter&& entries_) {
    entries = std::forward<T_IndexBucket_entries_struct_setter>(entries_);
    return entries;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< IndexBucket >;
};

void swap(IndexBucket& a, IndexBucket& b);

template <class Protocol_>
uint32_t IndexBucket::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class Region final : private apache::thrift::detail::st::ComparisonOperators<Region> {
 public:

  Region() :
      regionId(0),
      lastEntryEndOffset(0),
      classId(0),
      numItems(0),
      pinned(false) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Region(apache::thrift::FragileConstructor, int32_t regionId__arg, int32_t lastEntryEndOffset__arg, int32_t classId__arg, int32_t numItems__arg, bool pinned__arg);

  Region(Region&&) = default;

  Region(const Region&) = default;

  Region& operator=(Region&&) = default;

  Region& operator=(const Region&) = default;
  void __clear();
 public:
  int32_t regionId;
 public:
  int32_t lastEntryEndOffset;
 public:
  int32_t classId;
 public:
  int32_t numItems;
 public:
  bool pinned;

 public:
  bool operator==(const Region& rhs) const;
  bool operator<(const Region& rhs) const;

  int32_t get_regionId() const {
    return regionId;
  }

  int32_t& set_regionId(int32_t regionId_) {
    regionId = regionId_;
    return regionId;
  }

  int32_t get_lastEntryEndOffset() const {
    return lastEntryEndOffset;
  }

  int32_t& set_lastEntryEndOffset(int32_t lastEntryEndOffset_) {
    lastEntryEndOffset = lastEntryEndOffset_;
    return lastEntryEndOffset;
  }

  int32_t get_classId() const {
    return classId;
  }

  int32_t& set_classId(int32_t classId_) {
    classId = classId_;
    return classId;
  }

  int32_t get_numItems() const {
    return numItems;
  }

  int32_t& set_numItems(int32_t numItems_) {
    numItems = numItems_;
    return numItems;
  }

  bool get_pinned() const {
    return pinned;
  }

  bool& set_pinned(bool pinned_) {
    pinned = pinned_;
    return pinned;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Region >;
};

void swap(Region& a, Region& b);

template <class Protocol_>
uint32_t Region::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class RegionData final : private apache::thrift::detail::st::ComparisonOperators<RegionData> {
 public:

  RegionData() :
      regionSize(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RegionData(apache::thrift::FragileConstructor, ::std::vector< ::facebook::cachelib::navy::serialization::Region> regions__arg, int32_t regionSize__arg);

  RegionData(RegionData&&) = default;

  RegionData(const RegionData&) = default;

  RegionData& operator=(RegionData&&) = default;

  RegionData& operator=(const RegionData&) = default;
  void __clear();
 public:
  ::std::vector< ::facebook::cachelib::navy::serialization::Region> regions;
 public:
  int32_t regionSize;

 public:
  bool operator==(const RegionData& rhs) const;
  bool operator<(const RegionData& rhs) const;
  const ::std::vector< ::facebook::cachelib::navy::serialization::Region>& get_regions() const&;
  ::std::vector< ::facebook::cachelib::navy::serialization::Region> get_regions() &&;

  template <typename T_RegionData_regions_struct_setter = ::std::vector< ::facebook::cachelib::navy::serialization::Region>>
  ::std::vector< ::facebook::cachelib::navy::serialization::Region>& set_regions(T_RegionData_regions_struct_setter&& regions_) {
    regions = std::forward<T_RegionData_regions_struct_setter>(regions_);
    return regions;
  }

  int32_t get_regionSize() const {
    return regionSize;
  }

  int32_t& set_regionSize(int32_t regionSize_) {
    regionSize = regionSize_;
    return regionSize;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< RegionData >;
};

void swap(RegionData& a, RegionData& b);

template <class Protocol_>
uint32_t RegionData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class AccessStats final : private apache::thrift::detail::st::ComparisonOperators<AccessStats> {
 public:

  AccessStats() :
      totalHits(static_cast<int8_t>(0)),
      currHits(static_cast<int8_t>(0)),
      numReinsertions(static_cast<int8_t>(0)) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AccessStats(apache::thrift::FragileConstructor, int8_t totalHits__arg, int8_t currHits__arg, int8_t numReinsertions__arg);

  AccessStats(AccessStats&&) = default;

  AccessStats(const AccessStats&) = default;

  AccessStats& operator=(AccessStats&&) = default;

  AccessStats& operator=(const AccessStats&) = default;
  void __clear();
 public:
  int8_t totalHits;
 public:
  int8_t currHits;
 public:
  int8_t numReinsertions;

 public:
  struct __isset {
    bool totalHits;
    bool currHits;
    bool numReinsertions;
  } __isset = {};
  bool operator==(const AccessStats& rhs) const;
  bool operator<(const AccessStats& rhs) const;

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> totalHits_ref() const& {
    return {this->totalHits, __isset.totalHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> totalHits_ref() const&& {
    return {std::move(this->totalHits), __isset.totalHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> totalHits_ref() & {
    return {this->totalHits, __isset.totalHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> totalHits_ref() && {
    return {std::move(this->totalHits), __isset.totalHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> currHits_ref() const& {
    return {this->currHits, __isset.currHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> currHits_ref() const&& {
    return {std::move(this->currHits), __isset.currHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> currHits_ref() & {
    return {this->currHits, __isset.currHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> currHits_ref() && {
    return {std::move(this->currHits), __isset.currHits};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numReinsertions_ref() const& {
    return {this->numReinsertions, __isset.numReinsertions};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numReinsertions_ref() const&& {
    return {std::move(this->numReinsertions), __isset.numReinsertions};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numReinsertions_ref() & {
    return {this->numReinsertions, __isset.numReinsertions};
  }

  template <typename..., typename T = int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numReinsertions_ref() && {
    return {std::move(this->numReinsertions), __isset.numReinsertions};
  }

  int8_t get_totalHits() const {
    return totalHits;
  }

  int8_t& set_totalHits(int8_t totalHits_) {
    totalHits = totalHits_;
    __isset.totalHits = true;
    return totalHits;
  }

  int8_t get_currHits() const {
    return currHits;
  }

  int8_t& set_currHits(int8_t currHits_) {
    currHits = currHits_;
    __isset.currHits = true;
    return currHits;
  }

  int8_t get_numReinsertions() const {
    return numReinsertions;
  }

  int8_t& set_numReinsertions(int8_t numReinsertions_) {
    numReinsertions = numReinsertions_;
    __isset.numReinsertions = true;
    return numReinsertions;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< AccessStats >;
};

void swap(AccessStats& a, AccessStats& b);

template <class Protocol_>
uint32_t AccessStats::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class AccessTracker final : private apache::thrift::detail::st::ComparisonOperators<AccessTracker> {
 public:

  AccessTracker() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AccessTracker(apache::thrift::FragileConstructor, ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats> data__arg);

  AccessTracker(AccessTracker&&) = default;

  AccessTracker(const AccessTracker&) = default;

  AccessTracker& operator=(AccessTracker&&) = default;

  AccessTracker& operator=(const AccessTracker&) = default;
  void __clear();
 public:
  ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats> data;

 public:
  struct __isset {
    bool data;
  } __isset = {};
  bool operator==(const AccessTracker& rhs) const;
  bool operator<(const AccessTracker& rhs) const;

  template <typename..., typename T = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data_ref() const& {
    return {this->data, __isset.data};
  }

  template <typename..., typename T = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data_ref() const&& {
    return {std::move(this->data), __isset.data};
  }

  template <typename..., typename T = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data_ref() & {
    return {this->data, __isset.data};
  }

  template <typename..., typename T = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data_ref() && {
    return {std::move(this->data), __isset.data};
  }
  const ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>& get_data() const&;
  ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats> get_data() &&;

  template <typename T_AccessTracker_data_struct_setter = ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>>
  ::std::map<int64_t,  ::facebook::cachelib::navy::serialization::AccessStats>& set_data(T_AccessTracker_data_struct_setter&& data_) {
    data = std::forward<T_AccessTracker_data_struct_setter>(data_);
    __isset.data = true;
    return data;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< AccessTracker >;
};

void swap(AccessTracker& a, AccessTracker& b);

template <class Protocol_>
uint32_t AccessTracker::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class BlockCacheConfig final : private apache::thrift::detail::st::ComparisonOperators<BlockCacheConfig> {
 public:

  BlockCacheConfig();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BlockCacheConfig(apache::thrift::FragileConstructor, int64_t version__arg, int64_t cacheBaseOffset__arg, int64_t cacheSize__arg, int32_t blockSize__arg, ::std::set<int32_t> sizeClasses__arg, bool checksum__arg, ::std::map<int64_t, int64_t> sizeDist__arg, int64_t holeCount__arg, int64_t holeSizeTotal__arg, bool reinsertionPolicyEnabled__arg);

  BlockCacheConfig(BlockCacheConfig&&) = default;

  BlockCacheConfig(const BlockCacheConfig&) = default;

  BlockCacheConfig& operator=(BlockCacheConfig&&) = default;

  BlockCacheConfig& operator=(const BlockCacheConfig&) = default;
  void __clear();

  ~BlockCacheConfig();

 public:
  int64_t version;
 public:
  int64_t cacheBaseOffset;
 public:
  int64_t cacheSize;
 public:
  int32_t blockSize;
 public:
  ::std::set<int32_t> sizeClasses;
 public:
  bool checksum;
 public:
  ::std::map<int64_t, int64_t> sizeDist;
 public:
  int64_t holeCount;
 public:
  int64_t holeSizeTotal;
 public:
  bool reinsertionPolicyEnabled;

 public:
  struct __isset {
    bool sizeDist;
    bool holeCount;
    bool holeSizeTotal;
    bool reinsertionPolicyEnabled;
  } __isset = {};
  bool operator==(const BlockCacheConfig& rhs) const;
  bool operator<(const BlockCacheConfig& rhs) const;

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sizeDist_ref() const& {
    return {this->sizeDist, __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sizeDist_ref() const&& {
    return {std::move(this->sizeDist), __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sizeDist_ref() & {
    return {this->sizeDist, __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sizeDist_ref() && {
    return {std::move(this->sizeDist), __isset.sizeDist};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeCount_ref() const& {
    return {this->holeCount, __isset.holeCount};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeCount_ref() const&& {
    return {std::move(this->holeCount), __isset.holeCount};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeCount_ref() & {
    return {this->holeCount, __isset.holeCount};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeCount_ref() && {
    return {std::move(this->holeCount), __isset.holeCount};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> holeSizeTotal_ref() const& {
    return {this->holeSizeTotal, __isset.holeSizeTotal};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> holeSizeTotal_ref() const&& {
    return {std::move(this->holeSizeTotal), __isset.holeSizeTotal};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> holeSizeTotal_ref() & {
    return {this->holeSizeTotal, __isset.holeSizeTotal};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> holeSizeTotal_ref() && {
    return {std::move(this->holeSizeTotal), __isset.holeSizeTotal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reinsertionPolicyEnabled_ref() const& {
    return {this->reinsertionPolicyEnabled, __isset.reinsertionPolicyEnabled};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reinsertionPolicyEnabled_ref() const&& {
    return {std::move(this->reinsertionPolicyEnabled), __isset.reinsertionPolicyEnabled};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reinsertionPolicyEnabled_ref() & {
    return {this->reinsertionPolicyEnabled, __isset.reinsertionPolicyEnabled};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reinsertionPolicyEnabled_ref() && {
    return {std::move(this->reinsertionPolicyEnabled), __isset.reinsertionPolicyEnabled};
  }

  int64_t get_version() const {
    return version;
  }

  int64_t& set_version(int64_t version_) {
    version = version_;
    return version;
  }

  int64_t get_cacheBaseOffset() const {
    return cacheBaseOffset;
  }

  int64_t& set_cacheBaseOffset(int64_t cacheBaseOffset_) {
    cacheBaseOffset = cacheBaseOffset_;
    return cacheBaseOffset;
  }

  int64_t get_cacheSize() const {
    return cacheSize;
  }

  int64_t& set_cacheSize(int64_t cacheSize_) {
    cacheSize = cacheSize_;
    return cacheSize;
  }

  int32_t get_blockSize() const {
    return blockSize;
  }

  int32_t& set_blockSize(int32_t blockSize_) {
    blockSize = blockSize_;
    return blockSize;
  }
  const ::std::set<int32_t>& get_sizeClasses() const&;
  ::std::set<int32_t> get_sizeClasses() &&;

  template <typename T_BlockCacheConfig_sizeClasses_struct_setter = ::std::set<int32_t>>
  ::std::set<int32_t>& set_sizeClasses(T_BlockCacheConfig_sizeClasses_struct_setter&& sizeClasses_) {
    sizeClasses = std::forward<T_BlockCacheConfig_sizeClasses_struct_setter>(sizeClasses_);
    return sizeClasses;
  }

  bool get_checksum() const {
    return checksum;
  }

  bool& set_checksum(bool checksum_) {
    checksum = checksum_;
    return checksum;
  }
  const ::std::map<int64_t, int64_t>& get_sizeDist() const&;
  ::std::map<int64_t, int64_t> get_sizeDist() &&;

  template <typename T_BlockCacheConfig_sizeDist_struct_setter = ::std::map<int64_t, int64_t>>
  ::std::map<int64_t, int64_t>& set_sizeDist(T_BlockCacheConfig_sizeDist_struct_setter&& sizeDist_) {
    sizeDist = std::forward<T_BlockCacheConfig_sizeDist_struct_setter>(sizeDist_);
    __isset.sizeDist = true;
    return sizeDist;
  }

  int64_t get_holeCount() const {
    return holeCount;
  }

  int64_t& set_holeCount(int64_t holeCount_) {
    holeCount = holeCount_;
    __isset.holeCount = true;
    return holeCount;
  }

  int64_t get_holeSizeTotal() const {
    return holeSizeTotal;
  }

  int64_t& set_holeSizeTotal(int64_t holeSizeTotal_) {
    holeSizeTotal = holeSizeTotal_;
    __isset.holeSizeTotal = true;
    return holeSizeTotal;
  }

  bool get_reinsertionPolicyEnabled() const {
    return reinsertionPolicyEnabled;
  }

  bool& set_reinsertionPolicyEnabled(bool reinsertionPolicyEnabled_) {
    reinsertionPolicyEnabled = reinsertionPolicyEnabled_;
    __isset.reinsertionPolicyEnabled = true;
    return reinsertionPolicyEnabled;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< BlockCacheConfig >;
};

void swap(BlockCacheConfig& a, BlockCacheConfig& b);

template <class Protocol_>
uint32_t BlockCacheConfig::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class BigHashPersistentData final : private apache::thrift::detail::st::ComparisonOperators<BigHashPersistentData> {
 public:

  BigHashPersistentData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BigHashPersistentData(apache::thrift::FragileConstructor, int32_t version__arg, int64_t generationTime__arg, int64_t itemCount__arg, int64_t bucketSize__arg, int64_t cacheBaseOffset__arg, int64_t numBuckets__arg, ::std::map<int64_t, int64_t> sizeDist__arg);

  BigHashPersistentData(BigHashPersistentData&&) = default;

  BigHashPersistentData(const BigHashPersistentData&) = default;

  BigHashPersistentData& operator=(BigHashPersistentData&&) = default;

  BigHashPersistentData& operator=(const BigHashPersistentData&) = default;
  void __clear();

  ~BigHashPersistentData();

 public:
  int32_t version;
 public:
  int64_t generationTime;
 public:
  int64_t itemCount;
 public:
  int64_t bucketSize;
 public:
  int64_t cacheBaseOffset;
 public:
  int64_t numBuckets;
 public:
  ::std::map<int64_t, int64_t> sizeDist;

 public:
  struct __isset {
    bool sizeDist;
  } __isset = {};
  bool operator==(const BigHashPersistentData& rhs) const;
  bool operator<(const BigHashPersistentData& rhs) const;

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sizeDist_ref() const& {
    return {this->sizeDist, __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sizeDist_ref() const&& {
    return {std::move(this->sizeDist), __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sizeDist_ref() & {
    return {this->sizeDist, __isset.sizeDist};
  }

  template <typename..., typename T = ::std::map<int64_t, int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sizeDist_ref() && {
    return {std::move(this->sizeDist), __isset.sizeDist};
  }

  int32_t get_version() const {
    return version;
  }

  int32_t& set_version(int32_t version_) {
    version = version_;
    return version;
  }

  int64_t get_generationTime() const {
    return generationTime;
  }

  int64_t& set_generationTime(int64_t generationTime_) {
    generationTime = generationTime_;
    return generationTime;
  }

  int64_t get_itemCount() const {
    return itemCount;
  }

  int64_t& set_itemCount(int64_t itemCount_) {
    itemCount = itemCount_;
    return itemCount;
  }

  int64_t get_bucketSize() const {
    return bucketSize;
  }

  int64_t& set_bucketSize(int64_t bucketSize_) {
    bucketSize = bucketSize_;
    return bucketSize;
  }

  int64_t get_cacheBaseOffset() const {
    return cacheBaseOffset;
  }

  int64_t& set_cacheBaseOffset(int64_t cacheBaseOffset_) {
    cacheBaseOffset = cacheBaseOffset_;
    return cacheBaseOffset;
  }

  int64_t get_numBuckets() const {
    return numBuckets;
  }

  int64_t& set_numBuckets(int64_t numBuckets_) {
    numBuckets = numBuckets_;
    return numBuckets;
  }
  const ::std::map<int64_t, int64_t>& get_sizeDist() const&;
  ::std::map<int64_t, int64_t> get_sizeDist() &&;

  template <typename T_BigHashPersistentData_sizeDist_struct_setter = ::std::map<int64_t, int64_t>>
  ::std::map<int64_t, int64_t>& set_sizeDist(T_BigHashPersistentData_sizeDist_struct_setter&& sizeDist_) {
    sizeDist = std::forward<T_BigHashPersistentData_sizeDist_struct_setter>(sizeDist_);
    __isset.sizeDist = true;
    return sizeDist;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< BigHashPersistentData >;
};

void swap(BigHashPersistentData& a, BigHashPersistentData& b);

template <class Protocol_>
uint32_t BigHashPersistentData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
namespace facebook { namespace cachelib { namespace navy { namespace serialization {
class BloomFilterPersistentData final : private apache::thrift::detail::st::ComparisonOperators<BloomFilterPersistentData> {
 public:

  BloomFilterPersistentData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BloomFilterPersistentData(apache::thrift::FragileConstructor, int32_t numFilters__arg, int64_t hashTableBitSize__arg, int64_t filterByteSize__arg, int32_t fragmentSize__arg, ::std::vector<int64_t> seeds__arg);

  BloomFilterPersistentData(BloomFilterPersistentData&&) = default;

  BloomFilterPersistentData(const BloomFilterPersistentData&) = default;

  BloomFilterPersistentData& operator=(BloomFilterPersistentData&&) = default;

  BloomFilterPersistentData& operator=(const BloomFilterPersistentData&) = default;
  void __clear();

  ~BloomFilterPersistentData();

 public:
  int32_t numFilters;
 public:
  int64_t hashTableBitSize;
 public:
  int64_t filterByteSize;
 public:
  int32_t fragmentSize;
 public:
  ::std::vector<int64_t> seeds;

 public:
  bool operator==(const BloomFilterPersistentData& rhs) const;
  bool operator<(const BloomFilterPersistentData& rhs) const;

  int32_t get_numFilters() const {
    return numFilters;
  }

  int32_t& set_numFilters(int32_t numFilters_) {
    numFilters = numFilters_;
    return numFilters;
  }

  int64_t get_hashTableBitSize() const {
    return hashTableBitSize;
  }

  int64_t& set_hashTableBitSize(int64_t hashTableBitSize_) {
    hashTableBitSize = hashTableBitSize_;
    return hashTableBitSize;
  }

  int64_t get_filterByteSize() const {
    return filterByteSize;
  }

  int64_t& set_filterByteSize(int64_t filterByteSize_) {
    filterByteSize = filterByteSize_;
    return filterByteSize;
  }

  int32_t get_fragmentSize() const {
    return fragmentSize;
  }

  int32_t& set_fragmentSize(int32_t fragmentSize_) {
    fragmentSize = fragmentSize_;
    return fragmentSize;
  }
  const ::std::vector<int64_t>& get_seeds() const&;
  ::std::vector<int64_t> get_seeds() &&;

  template <typename T_BloomFilterPersistentData_seeds_struct_setter = ::std::vector<int64_t>>
  ::std::vector<int64_t>& set_seeds(T_BloomFilterPersistentData_seeds_struct_setter&& seeds_) {
    seeds = std::forward<T_BloomFilterPersistentData_seeds_struct_setter>(seeds_);
    return seeds;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< BloomFilterPersistentData >;
};

void swap(BloomFilterPersistentData& a, BloomFilterPersistentData& b);

template <class Protocol_>
uint32_t BloomFilterPersistentData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // facebook::cachelib::navy::serialization
