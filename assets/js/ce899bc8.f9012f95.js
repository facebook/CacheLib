"use strict";(self.webpackChunkcachelib=self.webpackChunkcachelib||[]).push([[5902],{15680:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>h,withMDXComponents:()=>m});var n=t(96540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},r.apply(this,arguments)}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=n.createContext({}),m=function(e){return function(a){var t=h(a.components);return n.createElement(e,r({},a,{components:t}))}},h=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=h(e.components);return n.createElement(c.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),m=h(t),p=l,u=m["".concat(i,".").concat(p)]||m[p]||s[p]||r;return t?n.createElement(u,o(o({ref:a},c),{},{components:t})):n.createElement(u,o({ref:a},c))}));function f(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=u;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},64468:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>d,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var n=t(9668),l=t(21367),r=(t(96540),t(15680)),i=["components"],o={id:"Write_data_to_cache",title:"Write data to cache"},d=void 0,c={unversionedId:"Cache_Library_User_Guides/Write_data_to_cache",id:"Cache_Library_User_Guides/Write_data_to_cache",title:"Write data to cache",description:"After setting up your cache, you can start writing data to it.",source:"@site/docs/Cache_Library_User_Guides/Write_data_to_cache.md",sourceDirName:"Cache_Library_User_Guides",slug:"/Cache_Library_User_Guides/Write_data_to_cache",permalink:"/docs/Cache_Library_User_Guides/Write_data_to_cache",draft:!1,editUrl:"https://github.com/facebook/CacheLib/edit/main/website/docs/Cache_Library_User_Guides/Write_data_to_cache.md",tags:[],version:"current",frontMatter:{id:"Write_data_to_cache",title:"Write data to cache"},sidebar:"userguideSidebar",previous:{title:"Set up a simple dram cache",permalink:"/docs/Cache_Library_User_Guides/Set_up_a_simple_cache"},next:{title:"Read data from cache",permalink:"/docs/Cache_Library_User_Guides/Read_data_from_cache"}},m={},h=[{value:"Allocate memory for data from cache",id:"allocate-memory-for-data-from-cache",level:2},{value:"Write data to allocated memory and insert item handle into cache",id:"write-data-to-allocated-memory-and-insert-item-handle-into-cache",level:2}],p={toc:h};function s(e){var a=e.components,t=(0,l.A)(e,i);return(0,r.mdx)("wrapper",(0,n.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"After ",(0,r.mdx)("a",{parentName:"p",href:"Set_up_a_simple_cache"},"setting up your cache"),", you can start writing data to it."),(0,r.mdx)("p",null,"To use cachelib to write data to your cache:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Allocate memory for the data from the cache, which will return an item's ",(0,r.mdx)("inlineCode",{parentName:"li"},"WriteHandle")," to the allocated memory. Item handle provides a reference counted wrapper to access a cache item."),(0,r.mdx)("li",{parentName:"ul"},"Write the data to the allocated memory and insert the item handle into the cache.")),(0,r.mdx)("h2",{id:"allocate-memory-for-data-from-cache"},"Allocate memory for data from cache"),(0,r.mdx)("p",null,"The header file allocator/CacheAllocator.h declares the following methods to allocate memory from cache:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"template <typename CacheTrait>;\nclass CacheAllocator : public CacheBase {\n  public:\n    // Allocate memory of a specific size from cache.\n    WriteHandle allocate(\n      PoolId id,\n      Key key,\n      uint32_t size,\n      uint32_t ttlSecs = 0,\n      uint32_t creationTime = 0,\n    );\n\n    // Allocate memory for a chained item of a specific size from cache.\n    WriteHandle allocateChainedItem(const ReadHandle& parent, uint32_t size);\n  // ...\n};\n")),(0,r.mdx)("p",null,"For example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto poolId = cache->addPool(\n  "default_pool",\n  cache->getCacheMemoryStats().ramCacheSize\n);\nWriteHandle handle = cache->allocate(poolId, "key1", 1024);\n')),(0,r.mdx)("p",null,"where:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"cache")," is a ",(0,r.mdx)("inlineCode",{parentName:"li"},"unique_ptr")," to ",(0,r.mdx)("inlineCode",{parentName:"li"},"CacheAllocator<facebook::cachelib::LruAllocator>")," (see ",(0,r.mdx)("a",{parentName:"li",href:"Set_up_a_simple_cache"},"Set up a simple dram cache"),")."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"WriteHandle")," is a ",(0,r.mdx)("inlineCode",{parentName:"li"},"CacheItem<facebook::cachelib::LruAllocator>::WriteHandle")," (see allocator/CacheItem.h), which is ",(0,r.mdx)("inlineCode",{parentName:"li"},"facebook::cachelib::detail::WriteHandleImpl")," defined in allocator/Handle.h. If allocation failed, an empty handle will be returned.")),(0,r.mdx)("p",null,"To get the writable memory from the allocated memory, call the ",(0,r.mdx)("inlineCode",{parentName:"p"},"getMemory")," method via the ",(0,r.mdx)("inlineCode",{parentName:"p"},"WriteHandle"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"if (handle) {\n  void* pwm = handle->getMemory();\n}\n")),(0,r.mdx)("p",null,"where ",(0,r.mdx)("inlineCode",{parentName:"p"},"handle")," is of type ",(0,r.mdx)("inlineCode",{parentName:"p"},"WriteHandle"),"."),(0,r.mdx)("p",null,"If the data size is greater than the maximum slab size (4 MB), use ",(0,r.mdx)("a",{parentName:"p",href:"chained_items"},"chained items")," to store the data with multiple items. To allocate memory for additional chained items from cache, call this method:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"WriteHandle allocateChainedItem(const ReadHandle& parent, uint32_t size);\n")),(0,r.mdx)("p",null,"where:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"ReadHandle")," is a ",(0,r.mdx)("inlineCode",{parentName:"li"},"CacheItem<facebook::cachelib::LruAllocator>::ReadHandle")," (see allocator/CacheItem.h), which is ",(0,r.mdx)("inlineCode",{parentName:"li"},"facebook::cachelib::detail::ReadHandleImpl")," defined in allocator/Handle.h.")),(0,r.mdx)("p",null,"For example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'size_t size = 1024 * 1024;\nauto parentItemHandle = cache->allocate(poolId, "parent", size);\n\nif (parentItemHandle) {\n  // Call allocateChainedItem() to allocate memory for 3 chained items.\n  // 4 * size is invalid, Because there are other costs, see getRequiredSize().\n  // But you can create more chained items.\n  auto chainedItemHandle1 = cache->allocateChainedItem(parentItemHandle, 1 * size);\n  auto chainedItemHandle2 = cache->allocateChainedItem(parentItemHandle, 2 * size);\n  auto chainedItemHandle3 = cache->allocateChainedItem(parentItemHandle, 3 * size);\n}\n')),(0,r.mdx)("h2",{id:"write-data-to-allocated-memory-and-insert-item-handle-into-cache"},"Write data to allocated memory and insert item handle into cache"),(0,r.mdx)("p",null,"To write data to the allocated memory in the cache, do the following:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Call the ",(0,r.mdx)("inlineCode",{parentName:"li"},"memcpy()")," function to write data to the allocated memory got from the item handle."),(0,r.mdx)("li",{parentName:"ol"},"Insert the item handle into cache.")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"memcpy")," function requires the destination address:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"void* memcpy(void* destination, const void* source, size_t num);\n")),(0,r.mdx)("p",null,"To get the destination address, call the ",(0,r.mdx)("inlineCode",{parentName:"p"},"getMemory()")," method via the ",(0,r.mdx)("inlineCode",{parentName:"p"},"WriteHandle"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"void* pwm = handle->getMemory();\n")),(0,r.mdx)("p",null,"where ",(0,r.mdx)("inlineCode",{parentName:"p"},"handle")," is of type ",(0,r.mdx)("inlineCode",{parentName:"p"},"WriteHandle"),"."),(0,r.mdx)("p",null,"To insert an item to the cache, call one of the following methods defined in\nallocator/CacheAllocator.h.:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"template <typename CacheTrait>\nclass CacheAllocator : public CacheBase {\n  public:\n    // will fail insertion if key is already present\n    bool insert(const WriteHandle& handle);\n\n    // will insert or replace existing item for the key and return the handle of the replaced old item\n    WriteHandle insertOrReplace(const WriteHandle& handle);\n\n    // link the chained items to the parent\n    void addChainedItem(const WriteHandle& parent, WriteHandle child);\n  // ...\n};\n")),(0,r.mdx)("p",null,"For example, the following code writes ",(0,r.mdx)("em",{parentName:"p"},"new")," data (i.e., data associated with a new key) into the cache:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'string data("Hello world");\n\n// Allocate memory for the data.\nauto handle = cache->allocate(pool_id, "key1", data.size());\n\nif (handle) {\n  // Write the data to the allocated memory.\n  std::memcpy(handle->getMemory(), data.data(), data.size());\n\n  // Insert the item handle into the cache.\n  cache->insertOrReplace(handle);\n} else {\n  // handle allocation failure\n}\n')),(0,r.mdx)("p",null,"And the following code writes ",(0,r.mdx)("em",{parentName:"p"},"new")," data (i.e., data associated with a new key) to the cache and ",(0,r.mdx)("em",{parentName:"p"},"replace")," the data associated with an existing key in the cache with replacement data:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'string data("new data");\n// Allocate memory for the data.\nauto handle = cache->allocate(pool_id, "key2", data.size());\n\n// Write the data to the cache.\nstd::memcpy(handle->getMemory(), data.data(), data.size());\n\n// Insert the item handle into the cache.\ncache->insertOrReplace(handle);\n\ndata = "Repalce the data associated with key key1";\n// Allocate memory for the replacement data.\nhandle = cache->allocate(pool_id, "key1", data.size());\n\n// Write the replacement data to the cache.\nstd::memcpy(handle->getMemory(), data.data(), data.size());\n\n// Insert the item handle into the cache.\ncache->insertOrReplace(handle);\n')),(0,r.mdx)("p",null,"To write data to chainded items, do the following:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"For each chained item, write data to its memory allocated by the ",(0,r.mdx)("inlineCode",{parentName:"li"},"allocateChainedItem()")," method."),(0,r.mdx)("li",{parentName:"ol"},"Call the ",(0,r.mdx)("inlineCode",{parentName:"li"},"addChainedItem()")," method to add the chained items to the parent item.")),(0,r.mdx)("p",null,"For example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'std::vector<std::string> chainedItems = { "item 1", "item 2", "item 3" };\n\nfor (auto itr = chainedItems.begin(); itr != chainedItems.end(); ++itr) {\n  // Allocate memory for the chained item.\n  auto chainedItemHandle = cache->allocateChainedItem(parentItemHandle, size);\n\n  if (!chainedItemHandle) {\n    // failed to allocate for the chained item.\n    throw "error";\n  }\n\n  // Write data to the chained item.\n  std::memcpy(chainedItemHandle->getMemory(), itr->data(), itr->size());\n\n  // Add the chained item to the parent item.\n  cache->addChainedItem(parentItemHandle, std::move(chainedItemHandle));\n}\n')),(0,r.mdx)("p",null,"A common thing is to try out the biggest allocate-able size for a regular item and chained item. User can find those out by calling the following methods."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"// Regular item\nauto largestSize = (Largest Alloc Granularity: 4MB by default, or user-specified) - (Item::getRequiredSize(key, 0))\n\n// Chained item\nauto largestSize = (Largest Alloc Granularity) - (ChainedItem::getRequiredSize(0))\n")))}s.isMDXComponent=!0}}]);