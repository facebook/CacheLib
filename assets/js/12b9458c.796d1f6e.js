"use strict";(self.webpackChunkcachelib=self.webpackChunkcachelib||[]).push([[5843],{15680:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>l,MDXProvider:()=>s,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},o.apply(this,arguments)}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){return function(t){var a=p(t.components);return n.createElement(e,o({},t,{components:a}))}},p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=p(a),s=r,u=m["".concat(i,".").concat(s)]||m[s]||h[s]||o;return a?n.createElement(u,c(c({ref:t},l),{},{components:a})):n.createElement(u,c({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},49526:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var n=a(9668),r=a(21367),o=(a(96540),a(15680)),i=["components"],c={id:"Read_data_from_cache",title:"Read data from cache"},d=void 0,l={unversionedId:"Cache_Library_User_Guides/Read_data_from_cache",id:"Cache_Library_User_Guides/Read_data_from_cache",title:"Read data from cache",description:"An item written to cache by cachelib is associated with a key. To read the item from cache, call the find() method (defined in allocator/CacheAllocator.h) with the key to look up the item:",source:"@site/docs/Cache_Library_User_Guides/Read_data_from_cache.md",sourceDirName:"Cache_Library_User_Guides",slug:"/Cache_Library_User_Guides/Read_data_from_cache",permalink:"/docs/Cache_Library_User_Guides/Read_data_from_cache",draft:!1,editUrl:"https://github.com/facebook/CacheLib/edit/main/website/docs/Cache_Library_User_Guides/Read_data_from_cache.md",tags:[],version:"current",frontMatter:{id:"Read_data_from_cache",title:"Read data from cache"},sidebar:"userguideSidebar",previous:{title:"Write data to cache",permalink:"/docs/Cache_Library_User_Guides/Write_data_to_cache"},next:{title:"Remove data from cache",permalink:"/docs/Cache_Library_User_Guides/Remove_data_from_cache"}},m={},p=[],s={toc:p};function h(e){var t=e.components,a=(0,r.A)(e,i);return(0,o.mdx)("wrapper",(0,n.A)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"An item written to cache by cachelib is associated with a key. To read the item from cache, call the ",(0,o.mdx)("inlineCode",{parentName:"p"},"find()")," method (defined in allocator/CacheAllocator.h) with the key to look up the item:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"ReadHandle find(Key key);\n")),(0,o.mdx)("p",null,"For example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto handle = cache->find("key1");\n')),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"find()")," method returns a ",(0,o.mdx)("inlineCode",{parentName:"p"},"ReadHandle")," that provides the read-only view of an item. You can use ",(0,o.mdx)("inlineCode",{parentName:"p"},"ReadHandle")," to get the read-only memory location of the data:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"const void* pdata = handle->getMemory();\n")),(0,o.mdx)("p",null,"where ",(0,o.mdx)("inlineCode",{parentName:"p"},"handle")," is of type ",(0,o.mdx)("inlineCode",{parentName:"p"},"ReadHandle"),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"getMemory()")," method via a ",(0,o.mdx)("inlineCode",{parentName:"p"},"ReadHandle")," returns a ",(0,o.mdx)("inlineCode",{parentName:"p"},"const void*")," pointer. Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"reinterpret_cast<const T*>")," to cast it to a pointer of a specific type ",(0,o.mdx)("inlineCode",{parentName:"p"},"const T"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"auto data = reinterpret_cast<const T*>(pdata);\n")),(0,o.mdx)("p",null,"For example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"auto handle = cache->find(\"key1\");\nif (handle) {\n  auto data = folly::StringPiece{reinterpret_cast<const char*>(handle->getMemory()), handle->getSize()};\n  std::cout << data << '\\n';\n}\n")),(0,o.mdx)("p",null,"You can also use iterators to read all the items written to the cache. See ",(0,o.mdx)("a",{parentName:"p",href:"Visit_data_in_cache"},"Visit data in cache"),"."),(0,o.mdx)("p",null,"To read data from chained items, start from the parent item handle, for example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"auto chainedAllocs = cache->viewAsChainedAllocs(parentItemHandle);\nfor (auto& c : chainedAllocs.getChain()) {\n  auto data = folly::StringPiece{reinterpret_cast<const char*>(c.getMemory()), c.getSize()};\n  std::cout << data << '\\n';\n}\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Refer to ",(0,o.mdx)("a",{parentName:"strong",href:"chained_items"},"Chained items")," to see how chained items are ordered in cache.")),(0,o.mdx)("p",null,"To get the ",(0,o.mdx)("em",{parentName:"p"},"n"),"th item in the chain, call the ",(0,o.mdx)("inlineCode",{parentName:"p"},"getNthInChain()")," method via ",(0,o.mdx)("inlineCode",{parentName:"p"},"CacheChainedAllocs"),". The returned ",(0,o.mdx)("em",{parentName:"p"},"n"),"th item will be read-only:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-cpp"},"auto chainedAllocs = cache->viewAsChainedAllocs(parentItemHandle);\nauto item = chainedAllocs.getNthInChain(1);\nif (item) {\n  std::cout << folly::StringPiece{reinterpret_cast<const char*>(item->getMemory()), item->getSize()}; << '\\n';\n}\n")),(0,o.mdx)("p",null,"Note that the first item has index ",(0,o.mdx)("inlineCode",{parentName:"p"},"0"),", second item has index ",(0,o.mdx)("inlineCode",{parentName:"p"},"1"),", and so on."))}h.isMDXComponent=!0}}]);