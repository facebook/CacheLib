"use strict";(self.webpackChunkcachelib=self.webpackChunkcachelib||[]).push([[8936],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>l});var r=n(96540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){return function(t){var n=u(t.components);return r.createElement(e,a({},t,{components:n}))}},u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(n),m=s,h=l["".concat(o,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},46226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(9668),s=n(21367),a=(n(96540),n(15680)),o=["components"],i={id:"TW_shm_persistence_setup",title:"TW shared memory persistence setup"},c=void 0,p={unversionedId:"facebook/Cache_Persistence/TW_shm_persistence_setup",id:"facebook/Cache_Persistence/TW_shm_persistence_setup",title:"TW shared memory persistence setup",description:"POSIX setup",source:"@site/docs/facebook/Cache_Persistence/TW_shm_persistence_setup.md",sourceDirName:"facebook/Cache_Persistence",slug:"/facebook/Cache_Persistence/TW_shm_persistence_setup",permalink:"/docs/facebook/Cache_Persistence/TW_shm_persistence_setup",draft:!1,editUrl:"https://github.com/facebook/CacheLib/edit/main/website/docs/facebook/Cache_Persistence/TW_shm_persistence_setup.md",tags:[],version:"current",frontMatter:{id:"TW_shm_persistence_setup",title:"TW shared memory persistence setup"}},l={},u=[{value:"POSIX setup",id:"posix-setup",level:2},{value:"Revert safety",id:"revert-safety",level:2},{value:"Cleanup safety",id:"cleanup-safety",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,s.A)(e,o);return(0,a.mdx)("wrapper",(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"posix-setup"},"POSIX setup"),(0,a.mdx)("p",null,"In the Tupperware config of your jobs, mount ",(0,a.mdx)("inlineCode",{parentName:"p"},"/dev/shm")," as a ",(0,a.mdx)("inlineCode",{parentName:"p"},"tmpfs")," and ensure it is persisted across task restarts. It looks like this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-cpp"},'user_directories=[\n  Directory(\n    path="/dev/shm",\n    persist=True,\n    fileSystemMount=FileSystemMount(\n      type="tmpfs",\n      device="tmpfs_device",\n      options="size=100%",\n      cleanUpTimeout=persistent_dir_cleanup_timeout,\n    ),\n  )\n],\n')),(0,a.mdx)("p",null,"In your cachelib configuration, ensure you have enabled the POSIX allocation mode:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-cpp"},"// Uses posix shm segments instead of the default sys-v shm segments.\n// This allows twshared to more easily clean up shared segments\n// when hosts leave our jobs.\n config.usePosixForShm();\n")),(0,a.mdx)("p",null,"After following the ",(0,a.mdx)("a",{parentName:"p",href:"../../Cache_Library_User_Guides/Cache_persistence"},"Cachelib persistence")," guide to properly preserve cache on process shutdown and reattach on startup, ensure the directory passed into ",(0,a.mdx)("inlineCode",{parentName:"p"},"enableCachePersistence()")," is nested within ",(0,a.mdx)("inlineCode",{parentName:"p"},"/dev/shm")," so as to ensure its preservation across process restarts:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-cpp"},'config.enableCachePersistence("<YOUR_DIRECTORY_PATH>");\n')),(0,a.mdx)("h2",{id:"revert-safety"},"Revert safety"),(0,a.mdx)("p",null,"If for some reason you ever want to disable shared memory allocation/persistence (e.g., an unrelated SEV that requires cache to be wiped), you must add additional clean up logic in the normal cache setup flow. Use this ",(0,a.mdx)("a",{parentName:"p",href:"https://fburl.com/diffusion/f6u250yz"},"Cachelib API")," to clean up shared memory segments. The code to do so looks like this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-cpp"},'const std::string cache_dir = "<YOUR_DIRECTORY_PATH>";  // Your metadata directory\nconst bool previously_on_posix = false;\n\nusing AllocatorType = facebook::cachelib::LruAllocator;\n\nif (persist_cache) {\n  config.enableCachePersistence(cache_dir);\n  config.usePosixForShm();\n  // cache reattach logic here (from https://fburl.com/wiki/8fwbg9qo)\n} else {\n  // We may have been using POSIX shared memory in the past to allocate cache\n  // objects Therefore, try to clean up any remaining data in our cache\n  // directory before creating a new cache.\n  if (AllocatorType::cleanupStrayShmSegments(cache_dir, previously_on_posix)) {\n    LOG(INFO) << "Cleanup of shared memory segments in: "\n              << cache_dir << " successful.";\n  } else {\n    LOG(INFO) << "Cleanup failed";\n  }\n  cache_ = std::make_unique<AllocatorType>(std::move(config));\n}\n')),(0,a.mdx)("p",null,"This ensures any cache data left in DRAM associated with ",(0,a.mdx)("inlineCode",{parentName:"p"},"cache_dir")," is cleaned up."),(0,a.mdx)("h2",{id:"cleanup-safety"},"Cleanup safety"),(0,a.mdx)("p",null,"To ensure that twshared cleans up the shared memory segments in your hosts when they leave your entitlement, you need to enable a host profile in your capacity dashboard. If you don\u2019t need any particular host profile, you can choose ",(0,a.mdx)("inlineCode",{parentName:"p"},"TWSHARED_CLEANUP"),". For more information (including steps required to enable a host profile), see ",(0,a.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/wiki/Tupperware/Capacity/Host_Profiles_User_Guide/"},"Host Profiles"),"."),(0,a.mdx)("p",null,"In addition, if you are reusing the same ",(0,a.mdx)("inlineCode",{parentName:"p"},"cache-dir")," passed to the previous setup, ensure to wipe it clear before switching from sys-v to posix or vice versa. Failure to do so would result in startup crashes where Cachelib detects incompatibility."))}d.isMDXComponent=!0}}]);